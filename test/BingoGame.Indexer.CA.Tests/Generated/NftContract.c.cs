// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nft_contract.proto
// </auto-generated>
// Original file comments:
// *
// NFT contract.
#pragma warning disable 0414, 1591
#region Designer generated code

using System.Collections.Generic;
using aelf = global::AElf.CSharp.Core;

namespace AElf.Contracts.NFT {

  #region Events
  public partial class NFTProtocolCreated : aelf::IEvent<NFTProtocolCreated>
  {
    public global::System.Collections.Generic.IEnumerable<NFTProtocolCreated> GetIndexed()
    {
      return new List<NFTProtocolCreated>
      {
      };
    }

    public NFTProtocolCreated GetNonIndexed()
    {
      return new NFTProtocolCreated
      {
        Symbol = Symbol,
        ProtocolName = ProtocolName,
        TotalSupply = TotalSupply,
        Creator = Creator,
        IsBurnable = IsBurnable,
        IssueChainId = IssueChainId,
        Metadata = Metadata,
        BaseUri = BaseUri,
        IsTokenIdReuse = IsTokenIdReuse,
        NftType = NftType,
      };
    }
  }

  public partial class NFTMinted : aelf::IEvent<NFTMinted>
  {
    public global::System.Collections.Generic.IEnumerable<NFTMinted> GetIndexed()
    {
      return new List<NFTMinted>
      {
      };
    }

    public NFTMinted GetNonIndexed()
    {
      return new NFTMinted
      {
        Symbol = Symbol,
        ProtocolName = ProtocolName,
        TokenId = TokenId,
        Creator = Creator,
        Minter = Minter,
        Metadata = Metadata,
        Owner = Owner,
        Uri = Uri,
        BaseUri = BaseUri,
        Alias = Alias,
        NftType = NftType,
        Quantity = Quantity,
        TotalQuantity = TotalQuantity,
        TokenHash = TokenHash,
      };
    }
  }

  public partial class Transferred : aelf::IEvent<Transferred>
  {
    public global::System.Collections.Generic.IEnumerable<Transferred> GetIndexed()
    {
      return new List<Transferred>
      {
      new Transferred
      {
        From = From
      },
      new Transferred
      {
        To = To
      },
      new Transferred
      {
        Symbol = Symbol
      },
      new Transferred
      {
        TokenId = TokenId
      },
      };
    }

    public Transferred GetNonIndexed()
    {
      return new Transferred
      {
        Amount = Amount,
        Memo = Memo,
      };
    }
  }

  public partial class Approved : aelf::IEvent<Approved>
  {
    public global::System.Collections.Generic.IEnumerable<Approved> GetIndexed()
    {
      return new List<Approved>
      {
      new Approved
      {
        Owner = Owner
      },
      new Approved
      {
        Spender = Spender
      },
      new Approved
      {
        Symbol = Symbol
      },
      new Approved
      {
        TokenId = TokenId
      },
      };
    }

    public Approved GetNonIndexed()
    {
      return new Approved
      {
        Amount = Amount,
      };
    }
  }

  public partial class UnApproved : aelf::IEvent<UnApproved>
  {
    public global::System.Collections.Generic.IEnumerable<UnApproved> GetIndexed()
    {
      return new List<UnApproved>
      {
      new UnApproved
      {
        Owner = Owner
      },
      new UnApproved
      {
        Spender = Spender
      },
      new UnApproved
      {
        Symbol = Symbol
      },
      new UnApproved
      {
        TokenId = TokenId
      },
      };
    }

    public UnApproved GetNonIndexed()
    {
      return new UnApproved
      {
        CurrentAllowance = CurrentAllowance,
      };
    }
  }

  public partial class Burned : aelf::IEvent<Burned>
  {
    public global::System.Collections.Generic.IEnumerable<Burned> GetIndexed()
    {
      return new List<Burned>
      {
      new Burned
      {
        Burner = Burner
      },
      new Burned
      {
        Symbol = Symbol
      },
      new Burned
      {
        TokenId = TokenId
      },
      };
    }

    public Burned GetNonIndexed()
    {
      return new Burned
      {
        Amount = Amount,
      };
    }
  }

  public partial class Recasted : aelf::IEvent<Recasted>
  {
    public global::System.Collections.Generic.IEnumerable<Recasted> GetIndexed()
    {
      return new List<Recasted>
      {
      new Recasted
      {
        Symbol = Symbol
      },
      new Recasted
      {
        TokenId = TokenId
      },
      new Recasted
      {
        OldMetadata = OldMetadata
      },
      new Recasted
      {
        NewMetadata = NewMetadata
      },
      new Recasted
      {
        Alias = Alias
      },
      new Recasted
      {
        Uri = Uri
      },
      };
    }

    public Recasted GetNonIndexed()
    {
      return new Recasted
      {
      };
    }
  }

  public partial class Assembled : aelf::IEvent<Assembled>
  {
    public global::System.Collections.Generic.IEnumerable<Assembled> GetIndexed()
    {
      return new List<Assembled>
      {
      new Assembled
      {
        Symbol = Symbol
      },
      new Assembled
      {
        TokenId = TokenId
      },
      new Assembled
      {
        AssembledNfts = AssembledNfts
      },
      new Assembled
      {
        AssembledFts = AssembledFts
      },
      };
    }

    public Assembled GetNonIndexed()
    {
      return new Assembled
      {
      };
    }
  }

  public partial class Disassembled : aelf::IEvent<Disassembled>
  {
    public global::System.Collections.Generic.IEnumerable<Disassembled> GetIndexed()
    {
      return new List<Disassembled>
      {
      new Disassembled
      {
        Symbol = Symbol
      },
      new Disassembled
      {
        TokenId = TokenId
      },
      new Disassembled
      {
        DisassembledNfts = DisassembledNfts
      },
      new Disassembled
      {
        DisassembledFts = DisassembledFts
      },
      };
    }

    public Disassembled GetNonIndexed()
    {
      return new Disassembled
      {
      };
    }
  }

  public partial class NFTTypeAdded : aelf::IEvent<NFTTypeAdded>
  {
    public global::System.Collections.Generic.IEnumerable<NFTTypeAdded> GetIndexed()
    {
      return new List<NFTTypeAdded>
      {
      };
    }

    public NFTTypeAdded GetNonIndexed()
    {
      return new NFTTypeAdded
      {
        FullName = FullName,
        ShortName = ShortName,
      };
    }
  }

  public partial class NFTTypeRemoved : aelf::IEvent<NFTTypeRemoved>
  {
    public global::System.Collections.Generic.IEnumerable<NFTTypeRemoved> GetIndexed()
    {
      return new List<NFTTypeRemoved>
      {
      };
    }

    public NFTTypeRemoved GetNonIndexed()
    {
      return new NFTTypeRemoved
      {
        ShortName = ShortName,
      };
    }
  }

  public partial class MinterListAdded : aelf::IEvent<MinterListAdded>
  {
    public global::System.Collections.Generic.IEnumerable<MinterListAdded> GetIndexed()
    {
      return new List<MinterListAdded>
      {
      };
    }

    public MinterListAdded GetNonIndexed()
    {
      return new MinterListAdded
      {
        MinterList = MinterList,
        Symbol = Symbol,
      };
    }
  }

  public partial class MinterListRemoved : aelf::IEvent<MinterListRemoved>
  {
    public global::System.Collections.Generic.IEnumerable<MinterListRemoved> GetIndexed()
    {
      return new List<MinterListRemoved>
      {
      };
    }

    public MinterListRemoved GetNonIndexed()
    {
      return new MinterListRemoved
      {
        MinterList = MinterList,
        Symbol = Symbol,
      };
    }
  }

  #endregion
}
#endregion

